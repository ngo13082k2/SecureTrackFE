import React, { useEffect, useState } from "react";
import axios from "axios";
import API_BASE_URL from "../config";
import Sidebar from "../component/sidebar";
const OutboundPage = () => {
  const [outbounds, setOutbounds] = useState([]);
  const [totalItems, setTotalItems] = useState(0);
  const [currentPage, setCurrentPage] = useState(0);
  const [grandTotal, setGrandTotal] = useState(0)
  const [totalPages, setTotalPages] = useState(1);
  const [selectedItem, setSelectedItem] = useState(null);
  const [details, setDetails] = useState([]);
  const [detailPage, setDetailPage] = useState(0);
  const [detailTotalPages, setDetailTotalPages] = useState(1);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const pageSize = 10;
  const token = localStorage.getItem("token");
  const [detailIsLastPage, setDetailIsLastPage] = useState(false);

  const fetchOutbounds = async (page = 0) => {
    try {
      const response = await axios.get(`${API_BASE_URL}/api/outbounds/summaryItem`, {
        params: { page, size: pageSize, startDate, endDate },
        headers: { Authorization: `Bearer ${token}` },
      });

      setOutbounds(response.data.data);
      setTotalItems(response.data.totalItems);
      setGrandTotal(response.data.grandTotal)
      setCurrentPage(response.data.currentPage);
      setTotalPages(response.data.totalPages);
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh s√°ch t·ªïng s·∫£n ph·∫©m xu·∫•t kho:", error);
    }
  };

  const fetchOutboundDetails = async (page = 0) => {
    try {
      const response = await axios.get(`${API_BASE_URL}/api/outbounds/paged`, {
        params: {
          page,
          size: 10,
          startDate: startDate || undefined,
          endDate: endDate || undefined,
        },
        headers: { Authorization: `Bearer ${token}` },
      });

      const fetchedData = response.data.data;
      setDetails(fetchedData);
      setCurrentPage(response.data.currentPage);

      // N·∫øu s·ªë l∆∞·ª£ng data √≠t h∆°n pageSize => trang cu·ªëi
      const isLastPage = fetchedData.length < 10;
      setDetailIsLastPage(isLastPage);

      setIsModalOpen(true);
    } catch (error) {
      console.error("L·ªói khi l·∫•y chi ti·∫øt xu·∫•t kho:", error);
    }
  };
  const downloadOutboundExcel = async (startDate, endDate) => {
    try {
      const token = localStorage.getItem("token");

      const response = await axios.get(`${API_BASE_URL}/api/outbounds/export`, {
        params: { startDate, endDate },
        headers: {
          Authorization: `Bearer ${token}`,
        },
        responseType: "blob",
      });

      // Format t√™n file
      const formatDate = (dateStr) => {
        const date = new Date(dateStr);
        return date.toISOString().split("T")[0]; // YYYY-MM-DD
      };

      const formattedStart = startDate ? formatDate(startDate) : "all";
      const formattedEnd = endDate ? formatDate(endDate) : "all";
      const filename = `outbound-${formattedStart}_to_${formattedEnd}.xlsx`;

      // T·∫£i file
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement("a");
      link.href = url;
      link.setAttribute("download", filename);
      document.body.appendChild(link);
      link.click();
      link.remove();
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫£i file Outbound Excel:", error);
      alert("Kh√¥ng th·ªÉ t·∫£i file Excel Outbound.");
    }
  };





  useEffect(() => {
    fetchOutbounds();
  }, []);

  return (
    <div className="flex h-screen">
      {/* Sidebar b√™n tr√°i */}
      <Sidebar />
      <div className="flex-1 mt-8 p-6 bg-white shadow-lg rounded-lg overflow-auto relative">
        <h2 className="text-2xl font-semibold text-gray-800 mb-4">üì¶ T·ªïng h·ª£p s·∫£n ph·∫©m xu·∫•t kho</h2>
        <div className="flex gap-4 mb-4">
          <label className="text-gray-700 font-medium">
            T·ª´ ng√†y:
            <input type="date" className="ml-2 p-2 border rounded" value={startDate} onChange={(e) => setStartDate(e.target.value)} />
          </label>
          <label className="text-gray-700 font-medium">
            ƒê·∫øn ng√†y:
            <input type="date" className="ml-2 p-2 border rounded" value={endDate} onChange={(e) => setEndDate(e.target.value)} />
          </label>
          <button className="px-4 py-2 bg-blue-500 text-white rounded" onClick={() => fetchOutbounds()}>üîç L·ªçc</button>
        </div>
        <p className="text-lg font-medium text-gray-700 mb-2">üìä T·ªïng s·∫£n ph·∫©m: <span className="font-bold text-blue-600">{grandTotal}</span></p>

        {outbounds.length === 0 ? (
          <p className="text-gray-500">Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o.</p>
        ) : (
          <div >
            {/* N√∫t Chi ti·∫øt v√† T·∫£i Excel n·∫±m ·ªü g√≥c ph·∫£i tr√™n c·ªßa b·∫£ng */}
            {outbounds.length > 0 && (
              <div className="absolute top-0 right-0 flex gap-2">
                <button
                  onClick={() => fetchOutboundDetails(0)}
                  className="bg-green-500 text-white px-4 py-2 rounded"
                >
                  üìÑ Chi ti·∫øt
                </button>

                <button
                  onClick={() => downloadOutboundExcel(startDate, endDate)}
                  className="bg-purple-500 text-white px-4 py-2 rounded"
                >
                  üì• T·∫£i Excel
                </button>
              </div>
            )}

            <table className="w-full border-collapse border border-gray-200 mt-8">
              <thead>
                <tr className="bg-gray-100">
                  <th className="border p-3">üì¶ M√£ s·∫£n ph·∫©m (Item)</th>
                  <th className="border p-3">üè∑Ô∏è T√™n s·∫£n ph·∫©m</th>
                  <th className="border p-3">üìä T·ªïng s·ªë l∆∞·ª£ng</th>
                </tr>
              </thead>
              <tbody>
                {outbounds.map((outbound, index) => (
                  <tr key={index} className="border">
                    <td className="border p-3">{outbound.item}</td>
                    <td className="border p-3">{outbound.itemName}</td>
                    <td className="border p-3 font-bold text-blue-600">{outbound.total}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
        {/* Popup Details */}
        {isModalOpen && (
          <div className="fixed inset-0 flex items-center justify-center bg-gray-900 bg-opacity-50">
            <div className="bg-white p-6 rounded-lg shadow-lg w-3/4">
              <h3 className="text-lg font-semibold mb-4">üìú Chi ti·∫øt xu·∫•t kho</h3>
              {details.length === 0 ? (
                <p className="text-gray-500">Kh√¥ng c√≥ d·ªØ li·ªáu.</p>
              ) : (
                <table className="w-full border-collapse border border-gray-200">
                  <thead>
                    <tr className="bg-gray-100">
                      
                      <th className="border p-3">M√£ ƒë∆°n</th>
                      <th className="border p-3">Kh√°ch h√†ng</th>
                      <th className="border p-3">item</th>
                      <th className="border p-3">itemName</th>

                      <th className="border p-3">QR Code</th>
                      <th className="border p-3">Ng√†y b√°n</th>
                      <th className="border p-3">NSX</th>
                      <th className="border p-3">HSD</th>
                      <th className="border p-3">L√¥ h√†ng</th>
                    </tr>
                  </thead>
                  <tbody>
                    {details.map((detail, index) => (
                      <tr key={index} className="border">
                        <td className="border p-3">{detail.orderId}</td>
                        <td className="border p-3">{detail.customerName}</td>
                        <td className="border p-3">{detail.item}</td>
                        <td className="border p-3">{detail.itemName}</td>

                        <td className="border p-3">{detail.qrCode}</td>
                        <td className="border p-3">{new Date(detail.saleDate).toLocaleDateString()}</td>
                        <td className="border p-3">{new Date(detail.manufacturingDate).toLocaleDateString()}</td>
                        <td className="border p-3">{new Date(detail.expirationDate).toLocaleDateString()}</td>
                        <td className="border p-3">{detail.batch}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              )}

          
              {/* Pagination in Popup */}
              <div className="flex justify-between items-center mt-4 flex-wrap gap-2">
                {/* N√∫t Trang ƒë·∫ßu */}
                <button
                  onClick={() => fetchOutboundDetails(0)}
                  disabled={currentPage === 0}
                  className={`px-4 py-2 rounded ${currentPage === 0 ? "bg-gray-300" : "bg-blue-500 text-white"}`}
                >
                  ‚èÆ Trang ƒë·∫ßu
                </button>

                {/* N√∫t Trang tr∆∞·ªõc */}
                <button
                  onClick={() => fetchOutboundDetails(currentPage - 1)}
                  disabled={currentPage === 0}
                  className={`px-4 py-2 rounded ${currentPage === 0 ? "bg-gray-300" : "bg-blue-500 text-white"}`}
                >
                  ‚¨Ö Trang tr∆∞·ªõc
                </button>

                {/* Hi·ªÉn th·ªã trang hi·ªán t·∫°i */}
                <span className="text-lg font-medium">
                  Trang {currentPage + 1} / {totalPages}
                </span>

                {/* N√∫t Trang sau */}
                <button
                  onClick={() => fetchOutboundDetails(currentPage + 1)}
                  disabled={detailIsLastPage}
                  className={`px-4 py-2 rounded ${detailIsLastPage ? "bg-gray-300" : "bg-blue-500 text-white"}`}
                >
                  Trang sau ‚û°
                </button>

                {/* N√∫t Trang cu·ªëi */}
                <button
                  onClick={() => fetchOutboundDetails(totalPages - 1)}
                  disabled={detailIsLastPage}
                  className={`px-4 py-2 rounded ${detailIsLastPage ? "bg-gray-300" : "bg-blue-500 text-white"}`}
                >
                  Trang cu·ªëi ‚è≠
                </button>
              </div>

              {/* N√∫t ƒê√≥ng */}
              <button
                className="mt-4 px-4 py-2 bg-red-500 text-white rounded"
                onClick={() => setIsModalOpen(false)}
              >
                ‚úñ ƒê√≥ng
              </button>

            </div>
          </div>
        )}

      </div>
    </div>
  );
};

export default OutboundPage;
